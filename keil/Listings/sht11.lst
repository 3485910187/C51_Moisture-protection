C51 COMPILER V9.60.7.0   SHT11                                                             05/16/2023 15:33:58 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SHT11
OBJECT MODULE PLACED IN .\Objects\sht11.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE sht11.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\sht
                    -11.lst) TABS(2) OBJECT(.\Objects\sht11.obj)

line level    source

   1          #include"sht11.h"
   2          
   3          unsigned char SHT11_1 = 5,SHT11_2=6;         //定义设备枚举sensor
   4          
   5          void Writbit_PX(char bite,char dat)
   6          {
   7   1          PX=dat ? (PX |= (0x01 << (bite%8))) : (PX &= ~(0x01 << (bite%8)));
   8   1      }
   9          
  10          bit Readbit_PX(char bite)
  11          {
  12   1        if((PX & (0x01 << bite))==0)return 0;return 1;
  13   1      }
  14          
  15          //写字节程序
  16          char s_write_byte(unsigned char sensor,unsigned char value)   
  17          { 
  18   1        unsigned char i,error=0; 
  19   1        for (i=0x80;i>0;i/=2)             //shift bit for masking 高位为1，循环右移
  20   1        { 
  21   2          if (i&value) Writbit_PX(sensor,1);          //和要发送的数相与，结果为发送的位
  22   2            else  Writbit_PX(sensor,0);                      
  23   2            SCK=1;                          
  24   2            _nop_();_nop_();_nop_();        //延时3us 
  25   2            SCK=0;
  26   2        }
  27   1        Writbit_PX(sensor,1);                    //释放数据线
  28   1        SCK=1;                            
  29   1        error=Readbit_PX(sensor);                       //检查应答信号，确认通讯正常
  30   1        _nop_();_nop_();_nop_();
  31   1        SCK=0;        
  32   1        Writbit_PX(sensor,1);   
  33   1        return error;                     //error=1 通讯错误
  34   1      }
  35          
  36          //读字节程序
  37          char s_read_byte(unsigned char sensor,unsigned char ack)
  38          //----------------------------------------------------------------------------------
  39          { 
  40   1        unsigned char i,val=0;
  41   1        Writbit_PX(sensor,1);              //释放数据线
  42   1        for(i=0x80;i>0;i>>=1)             //高位为1，循环右移
  43   1        { 
  44   2          SCK=1;                         
  45   2            if(Readbit_PX(sensor)) val=(val|i);        //读一位数据线的值 
  46   2            SCK=0;       
  47   2        }
  48   1        Writbit_PX(sensor,!ack);                        //如果是校验，读取完后结束通讯；
  49   1        SCK=1;                            
  50   1        _nop_();_nop_();_nop_();          //延时3us 
  51   1        SCK=0;   
  52   1        _nop_();_nop_();_nop_();       
  53   1        Writbit_PX(sensor,1);                           //释放数据线
  54   1        return val;
C51 COMPILER V9.60.7.0   SHT11                                                             05/16/2023 15:33:58 PAGE 2   

  55   1      }
  56          
  57          //启动传输
  58          void s_transstart(unsigned char sensor)
  59          // generates a transmission start 
  60          //       _____         ________
  61          // DATA:      |_______|
  62          //           ___     ___
  63          // SCK : ___|   |___|   |______
  64          { 
  65   1          Writbit_PX(sensor,1); SCK=0;                   //准备
  66   1          _nop_();
  67   1          SCK=1;
  68   1          _nop_();
  69   1          Writbit_PX(sensor,0);   
  70   1          _nop_();
  71   1          SCK=0; 
  72   1           _nop_();_nop_();_nop_();
  73   1          SCK=1;
  74   1          _nop_();
  75   1          Writbit_PX(sensor,1);      
  76   1          _nop_();
  77   1          SCK=0;       
  78   1      }
  79          
  80          
  81          //连接复位
  82          void s_connectionreset(unsigned char sensor)
  83          // communication reset: DATA-line=1 and at least 9 SCK cycles followed by transstart
  84          //       _____________________________________________________         ________
  85          // DATA:                                                      |_______|
  86          //          _    _    _    _    _    _    _    _    _        ___     ___
  87          // SCK : __| |__| |__| |__| |__| |__| |__| |__| |__| |______|   |___|   |______
  88          { 
  89   1        unsigned char i; 
  90   1        Writbit_PX(sensor,1); SCK=0;                    //准备
  91   1        for(i=0;i<9;i++)                  //DATA保持高，SCK时钟触发9次，发送启动传输，通迅即复位
  92   1        { 
  93   2          SCK=1;
  94   2            SCK=0;
  95   2        }
  96   1        s_transstart(sensor);                   //启动传输
  97   1      }
  98          
  99          
 100          //软复位程序
 101          char s_softreset(unsigned char sensor)
 102          // resets the sensor by a softreset 
 103          { 
 104   1        unsigned char error=0; 
 105   1        s_connectionreset(sensor);              //启动连接复位
 106   1        error+=s_write_byte(sensor,RESET);       //发送复位命令
 107   1        return error;                     //error=1 通讯错误
 108   1      }
 109          
 110          
 111          /*
 112          //读状态寄存器
 113          char s_read_statusreg(unsigned char *p_value, unsigned char *p_checksum)
 114          //----------------------------------------------------------------------------------
 115          // reads the status register with checksum (8-bit)
 116          { 
C51 COMPILER V9.60.7.0   SHT11                                                             05/16/2023 15:33:58 PAGE 3   

 117            unsigned char error=0;
 118            s_transstart();                   //transmission start
 119            error=s_write_byte(STATUS_REG_R); //send command to sensor
 120            *p_value=s_read_byte(ACK);        //read status register (8-bit)
 121            *p_checksum=s_read_byte(noACK);   //read checksum (8-bit) 
 122            return error;                     //error=1 in case of no response form the sensor
 123          }
 124          
 125          //写状态寄存器
 126          char s_write_statusreg(unsigned char *p_value)
 127          // writes the status register with checksum (8-bit)
 128          { 
 129            unsigned char error=0;
 130            s_transstart();                   //transmission start
 131            error+=s_write_byte(STATUS_REG_W);//send command to sensor
 132            error+=s_write_byte(*p_value);    //send value of status register
 133            return error;                     //error>=1 in case of no response form the sensor
 134          }                             */         
 135          
 136                     
 137          //温湿度测量
 138          char s_measure(unsigned char sensor,unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
 139          // 进行温度或者湿度转换，由参数mode决定转换内容；
 140          { 
 141   1      //  enum {TEMP,HUMI};    //已经在头文件中定义
 142   1        unsigned error=0;
 143   1        unsigned int i;
 144   1      
 145   1        s_transstart(sensor);                   //启动传输
 146   1        switch(mode)                     //选择发送命令
 147   1          { 
 148   2          case TEMP : error+=s_write_byte(sensor,MEASURE_TEMP); break;       //测量温度
 149   2            case HUMI : error+=s_write_byte(sensor,MEASURE_HUMI); break;       //测量湿度
 150   2            default     : break; 
 151   2        }
 152   1        for (i=0;i<65535;i++) if(Readbit_PX(sensor)==0) break; //等待测量结束
 153   1        if(Readbit_PX(sensor)) error+=1;                // 如果长时间数据线没有拉低，说明测量错误 
 154   1        *(p_value) =s_read_byte(sensor,ACK);    //读第一个字节，高字节 (MSB)
 155   1        *(p_value+1)=s_read_byte(sensor,ACK);    //读第二个字节，低字节 (LSB)
 156   1        *p_checksum =s_read_byte(sensor,noACK); //read CRC校验码
 157   1        return error;          // error=1 通讯错误
 158   1      }
 159          
 160          //温湿度值标度变换及温度补偿
 161          void calc_sth10(float *p_humidity ,float *p_temperature)
 162          { 
 163   1        code const float C1=-4.0;              // 12位湿度精度 修正公式
 164   1        code const float C2=+0.0405;           // 12位湿度精度 修正公式
 165   1        code const float C3=-0.0000028;        // 12位湿度精度 修正公式
 166   1      //  code const float T1=+0.01;             // 14位温度精度 5V条件  修正公式
 167   1      //  code const float T2=+0.00008;          // 14位温度精度 5V条件  修正公式
 168   1      
 169   1         xdata float rh=*p_humidity;             // rh:      12位 湿度 
 170   1         xdata float t=*p_temperature;           // t:       14位 温度
 171   1         xdata float rh_lin;                     // rh_lin: 湿度 linear值
 172   1         xdata float rh_true;                    // rh_true: 湿度 ture值
 173   1         xdata float t_C;                        // t_C   : 温度 ℃
 174   1      
 175   1        t_C=t*0.01 - 40;                  //补偿温度
 176   1        rh_lin=C3*rh*rh + C2*rh + C1;     //相对湿度非线性补偿
 177   1      //  rh_true=(t_C-25)*(T1+T2*rh)+rh_lin;   //相对湿度对于温度依赖性补偿
 178   1        rh_true=rh_lin-3;   //取消湿度补偿
C51 COMPILER V9.60.7.0   SHT11                                                             05/16/2023 15:33:58 PAGE 4   

 179   1        if(rh_true <16.9)rh_true-=1;
 180   1          if(rh_true >71.9)rh_true+=1;
 181   1            if(rh_true >86.9)rh_true+=1;
 182   1              if(rh_true >95.9)rh_true+=1;
 183   1      
 184   1        if(rh_true>100)rh_true=100;       //湿度最大修正
 185   1        if(rh_true<0.1)rh_true=0.1;       //湿度最小修正
 186   1      
 187   1        *p_temperature=t_C;               //返回温度结果
 188   1        *p_humidity=rh_true;              //返回湿度结果
 189   1      }
 190          
 191          //从相对温度和湿度计算露点
 192          /*float calc_dewpoint(float h,float t)
 193          {
 194            float logEx,dew_point;
 195            logEx=0.66077+7.5*t/(237.3+t)+(log10(h)-2);
 196            dew_point = (logEx - 0.66077)*237.3/(0.66077+7.5-logEx);
 197            return dew_point;
 198          }   
 199          */
 200          
 201          void TH_output(unsigned char sensor,int *T,int *H)
 202          {
 203   1      
 204   1        value humi_val,temp_val;    //定义两个共同体，一个用于湿度，一个用于温度
 205   1      //  float dew_point;          //用于记录露点值
 206   1        unsigned char error;        //用于检验是否出现错误
 207   1        unsigned char checksum;     //CRC   
 208   1        
 209   1          error=0;             //初始化error=0，即没有错误
 210   1          error+=s_measure(sensor,(unsigned char*)&temp_val.i,&checksum,TEMP); //温度测量
 211   1          error+=s_measure(sensor,(unsigned char*)&humi_val.i,&checksum,HUMI); //湿度测量
 212   1            if(error!=0) s_connectionreset(sensor);                 ////如果发生错误，系统复位
 213   1            else
 214   1            { 
 215   2            humi_val.f=(float)humi_val.i;                   //转换为浮点数
 216   2              temp_val.f=(float)temp_val.i;                   //转换为浮点数
 217   2              calc_sth10(&humi_val.f,&temp_val.f);            //修正相对湿度及温度
 218   2      //      dew_point=calc_dewpoint(humi_val.f,temp_val.f); //计算e dew_point
 219   2              *T=temp_val.f*10;
 220   2              *H=humi_val.f*10;
 221   2            }
 222   1      }
 223          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1238    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----      28
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      36
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
