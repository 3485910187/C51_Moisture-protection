C51 COMPILER V9.60.7.0   SHT11_0                                                           04/17/2023 11:28:09 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SHT11_0
OBJECT MODULE PLACED IN .\Objects\sht11_0.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE sht11_0.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\s
                    -ht11_0.lst) TABS(2) OBJECT(.\Objects\sht11_0.obj)

line level    source

   1          #include"sht11.h"
   2          
   3          //写字节程序
   4          char s_write_byte(unsigned char value)   
   5          { 
   6   1        unsigned char i,error=0; 
   7   1        for (i=0x80;i>0;i/=2)             //shift bit for masking 高位为1，循环右移
   8   1        { 
   9   2          if (i&value) Sht11DATA=1;          //和要发送的数相与，结果为发送的位
*** ERROR C202 IN LINE 9 OF sht11_0.c: 'Sht11DATA': undefined identifier
  10   2            else Sht11DATA=0;                        
*** ERROR C202 IN LINE 10 OF sht11_0.c: 'Sht11DATA': undefined identifier
  11   2            SCK=1;                          
  12   2            _nop_();_nop_();_nop_();        //延时3us 
  13   2            SCK=0;
  14   2        }
  15   1        Sht11DATA=1;                           //释放数据线
*** ERROR C202 IN LINE 15 OF sht11_0.c: 'Sht11DATA': undefined identifier
  16   1        SCK=1;                            
  17   1        error=Sht11DATA;                       //检查应答信号，确认通讯正常
*** ERROR C202 IN LINE 17 OF sht11_0.c: 'Sht11DATA': undefined identifier
  18   1        _nop_();_nop_();_nop_();
  19   1        SCK=0;        
  20   1        Sht11DATA=1;
*** ERROR C202 IN LINE 20 OF sht11_0.c: 'Sht11DATA': undefined identifier
  21   1        return error;                     //error=1 通讯错误
  22   1      }
  23          
  24          //读字节程序
  25          char s_read_byte(unsigned char ack)
  26          //----------------------------------------------------------------------------------
  27          { 
  28   1        unsigned char i,val=0;
  29   1        Sht11DATA=1;                           //释放数据线
*** ERROR C202 IN LINE 29 OF sht11_0.c: 'Sht11DATA': undefined identifier
  30   1        for(i=0x80;i>0;i>>=1)             //高位为1，循环右移
  31   1        { 
  32   2          SCK=1;                         
  33   2            if(Sht11DATA) val=(val|i);        //读一位数据线的值 
*** ERROR C202 IN LINE 33 OF sht11_0.c: 'Sht11DATA': undefined identifier
  34   2            SCK=0;       
  35   2        }
  36   1        Sht11DATA=!ack;                        //如果是校验，读取完后结束通讯；
*** ERROR C202 IN LINE 36 OF sht11_0.c: 'Sht11DATA': undefined identifier
  37   1        SCK=1;                            
  38   1        _nop_();_nop_();_nop_();          //延时3us 
  39   1        SCK=0;   
  40   1        _nop_();_nop_();_nop_();       
  41   1        Sht11DATA=1;                           //释放数据线
*** ERROR C202 IN LINE 41 OF sht11_0.c: 'Sht11DATA': undefined identifier
  42   1        return val;
  43   1      }
  44          
  45          //启动传输
C51 COMPILER V9.60.7.0   SHT11_0                                                           04/17/2023 11:28:09 PAGE 2   

  46          void s_transstart(void)
  47          // generates a transmission start 
  48          //       _____         ________
  49          // DATA:      |_______|
  50          //           ___     ___
  51          // SCK : ___|   |___|   |______
  52          { 
  53   1          Sht11DATA=1; SCK=0;                   //准备
*** ERROR C202 IN LINE 53 OF sht11_0.c: 'Sht11DATA': undefined identifier
  54   1          _nop_();
  55   1          SCK=1;
  56   1          _nop_();
  57   1          Sht11DATA=0;
*** ERROR C202 IN LINE 57 OF sht11_0.c: 'Sht11DATA': undefined identifier
  58   1          _nop_();
  59   1          SCK=0; 
  60   1           _nop_();_nop_();_nop_();
  61   1          SCK=1;
  62   1          _nop_();
  63   1          Sht11DATA=1;     
*** ERROR C202 IN LINE 63 OF sht11_0.c: 'Sht11DATA': undefined identifier
  64   1          _nop_();
  65   1          SCK=0;     
  66   1      }
  67          
  68          
  69          //连接复位
  70          void s_connectionreset(void)
  71          // communication reset: DATA-line=1 and at least 9 SCK cycles followed by transstart
  72          //       _____________________________________________________         ________
  73          // DATA:                                                      |_______|
  74          //          _    _    _    _    _    _    _    _    _        ___     ___
  75          // SCK : __| |__| |__| |__| |__| |__| |__| |__| |__| |______|   |___|   |______
  76          { 
*** ERROR C236 IN LINE 76 OF sht11_0.c: '_s_connectionreset': different length of parameter lists
  77   1        unsigned char i; 
  78   1        Sht11DATA=1; SCK=0;                    //准备
*** ERROR C202 IN LINE 78 OF sht11_0.c: 'Sht11DATA': undefined identifier
  79   1        for(i=0;i<9;i++)                  //DATA保持高，SCK时钟触发9次，发送启动传输，通迅即复位
  80   1        { 
  81   2          SCK=1;
  82   2            SCK=0;
  83   2        }
  84   1        s_transstart();                   //启动传输
  85   1      }
  86          
  87          
  88          //软复位程序
  89          char s_softreset(void)
  90          // resets the sensor by a softreset 
  91          { 
  92   1        unsigned char error=0; 
  93   1        s_connectionreset();              //启动连接复位
  94   1        error+=s_write_byte(RESET);       //发送复位命令
  95   1        return error;                     //error=1 通讯错误
  96   1      }
  97          
  98          
  99          /*
 100          //读状态寄存器
 101          char s_read_statusreg(unsigned char *p_value, unsigned char *p_checksum)
 102          //----------------------------------------------------------------------------------
C51 COMPILER V9.60.7.0   SHT11_0                                                           04/17/2023 11:28:09 PAGE 3   

 103          // reads the status register with checksum (8-bit)
 104          { 
 105            unsigned char error=0;
 106            s_transstart();                   //transmission start
 107            error=s_write_byte(STATUS_REG_R); //send command to sensor
 108            *p_value=s_read_byte(ACK);        //read status register (8-bit)
 109            *p_checksum=s_read_byte(noACK);   //read checksum (8-bit) 
 110            return error;                     //error=1 in case of no response form the sensor
 111          }
 112          
 113          //写状态寄存器
 114          char s_write_statusreg(unsigned char *p_value)
 115          // writes the status register with checksum (8-bit)
 116          { 
 117            unsigned char error=0;
 118            s_transstart();                   //transmission start
 119            error+=s_write_byte(STATUS_REG_W);//send command to sensor
 120            error+=s_write_byte(*p_value);    //send value of status register
 121            return error;                     //error>=1 in case of no response form the sensor
 122          }                             */         
 123          
 124                     
 125          //温湿度测量
 126          char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
 127          // 进行温度或者湿度转换，由参数mode决定转换内容；
 128          { 
*** ERROR C236 IN LINE 128 OF sht11_0.c: '_s_measure': different length of parameter lists
 129   1      //  enum {TEMP,HUMI};    //已经在头文件中定义
 130   1        unsigned error=0;
 131   1        unsigned int i;
 132   1      
 133   1        s_transstart();                   //启动传输
 134   1        switch(mode)                     //选择发送命令
 135   1          { 
 136   2          case TEMP : error+=s_write_byte(MEASURE_TEMP); break;      //测量温度
 137   2            case HUMI : error+=s_write_byte(MEASURE_HUMI); break;      //测量湿度
 138   2            default     : break; 
 139   2        }
 140   1        for (i=0;i<65535;i++) if(Sht11DATA==0) break; //等待测量结束
*** ERROR C202 IN LINE 140 OF sht11_0.c: 'Sht11DATA': undefined identifier
 141   1        if(Sht11DATA) error+=1;                // 如果长时间数据线没有拉低，说明测量错误 
*** ERROR C202 IN LINE 141 OF sht11_0.c: 'Sht11DATA': undefined identifier
 142   1        *(p_value) =s_read_byte(ACK);    //读第一个字节，高字节 (MSB)
 143   1        *(p_value+1)=s_read_byte(ACK);    //读第二个字节，低字节 (LSB)
 144   1        *p_checksum =s_read_byte(noACK); //read CRC校验码
 145   1        return error;          // error=1 通讯错误
 146   1      }
 147          
 148          //温湿度值标度变换及温度补偿
 149          void calc_sth10(float *p_humidity ,float *p_temperature)
 150          { 
 151   1        const float C1=-4.0;              // 12位湿度精度 修正公式
 152   1        const float C2=+0.0405;           // 12位湿度精度 修正公式
 153   1        const float C3=-0.0000028;        // 12位湿度精度 修正公式
 154   1        const float T1=+0.01;             // 14位温度精度 5V条件  修正公式
 155   1        const float T2=+0.00008;          // 14位温度精度 5V条件  修正公式
 156   1      
 157   1        float rh=*p_humidity;             // rh:      12位 湿度 
 158   1        float t=*p_temperature;           // t:       14位 温度
 159   1        float rh_lin;                     // rh_lin: 湿度 linear值
 160   1        float rh_true;                    // rh_true: 湿度 ture值
 161   1        float t_C;                        // t_C   : 温度 ℃
C51 COMPILER V9.60.7.0   SHT11_0                                                           04/17/2023 11:28:09 PAGE 4   

 162   1      
 163   1        t_C=t*0.01 - 40;                  //补偿温度
 164   1        rh_lin=C3*rh*rh + C2*rh + C1;     //相对湿度非线性补偿
 165   1        rh_true=(t_C-25)*(T1+T2*rh)+rh_lin;   //相对湿度对于温度依赖性补偿
 166   1        if(rh_true>100)rh_true=100;       //湿度最大修正
 167   1        if(rh_true<0.1)rh_true=0.1;       //湿度最小修正
 168   1      
 169   1        *p_temperature=t_C;               //返回温度结果
 170   1        *p_humidity=rh_true;              //返回湿度结果
 171   1      }
 172          
 173          //从相对温度和湿度计算露点
 174          /*float calc_dewpoint(float h,float t)
 175          {
 176            float logEx,dew_point;
 177            logEx=0.66077+7.5*t/(237.3+t)+(log10(h)-2);
 178            dew_point = (logEx - 0.66077)*237.3/(0.66077+7.5-logEx);
 179            return dew_point;
 180          }   
 181          */
 182          
 183          void TH_output(int *T,int *H)
 184          {
*** ERROR C236 IN LINE 184 OF sht11_0.c: '_TH_output': different length of parameter lists
 185   1      
 186   1        value humi_val,temp_val;    //定义两个共同体，一个用于湿度，一个用于温度
 187   1      //  float dew_point;          //用于记录露点值
 188   1        unsigned char error;        //用于检验是否出现错误
 189   1        unsigned char checksum;     //CRC   
 190   1        
 191   1          error=0;             //初始化error=0，即没有错误
 192   1          error+=s_measure((unsigned char*)&temp_val.i,&checksum,TEMP); //温度测量
 193   1          error+=s_measure((unsigned char*)&humi_val.i,&checksum,HUMI); //湿度测量
 194   1            if(error!=0) s_connectionreset();                 ////如果发生错误，系统复位
 195   1            else
 196   1            { 
 197   2            humi_val.f=(float)humi_val.i;                   //转换为浮点数
 198   2              temp_val.f=(float)temp_val.i;                   //转换为浮点数
 199   2              calc_sth10(&humi_val.f,&temp_val.f);            //修正相对湿度及温度
 200   2      //      dew_point=calc_dewpoint(humi_val.f,temp_val.f); //计算e dew_point
 201   2              *T=temp_val.f*10;
 202   2              *H=humi_val.f*10;
 203   2            }
 204   1      }
 205          

C51 COMPILATION COMPLETE.  0 WARNING(S),  18 ERROR(S)
